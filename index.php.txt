<?php
// Get environment variables
$botToken = getenv('BOT_TOKEN') ?: 'Place_Your_Token_Here';
define('BOT_TOKEN', $botToken);
define('API_URL', 'https://api.telegram.org/bot' . BOT_TOKEN . '/');
define('USERS_FILE', 'users.json');
define('ERROR_LOG', 'error.log');

// Set content type
header('Content-Type: application/json');

// Error logging
function logError($message) {
    $timestamp = date('Y-m-d H:i:s');
    file_put_contents(ERROR_LOG, "[$timestamp] $message\n", FILE_APPEND);
}

// Data management
function loadUsers() {
    try {
        if (!file_exists(USERS_FILE)) {
            file_put_contents(USERS_FILE, json_encode([]));
            chmod(USERS_FILE, 0664);
        }
        $data = file_get_contents(USERS_FILE);
        if ($data === false) {
            logError("Failed to read users file");
            return [];
        }
        $users = json_decode($data, true);
        return is_array($users) ? $users : [];
    } catch (Exception $e) {
        logError("Load users failed: " . $e->getMessage());
        return [];
    }
}

function saveUsers($users) {
    try {
        $result = file_put_contents(USERS_FILE, json_encode($users, JSON_PRETTY_PRINT));
        if ($result === false) {
            logError("Failed to write to users file");
            return false;
        }
        return true;
    } catch (Exception $e) {
        logError("Save users failed: " . $e->getMessage());
        return false;
    }
}

// Message sending with inline keyboard
function sendMessage($chat_id, $text, $keyboard = null) {
    try {
        $params = [
            'chat_id' => $chat_id,
            'text' => $text,
            'parse_mode' => 'HTML'
        ];
        
        if ($keyboard) {
            $params['reply_markup'] = json_encode([
                'inline_keyboard' => $keyboard
            ]);
        }
        
        $url = API_URL . 'sendMessage';
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $result = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($result === false || $httpCode !== 200) {
            logError("Send message failed. HTTP Code: $httpCode, Response: " . $result);
            return false;
        }
        
        return true;
    } catch (Exception $e) {
        logError("Send message failed: " . $e->getMessage());
        return false;
    }
}

// Answer callback query to remove loading state
function answerCallbackQuery($callback_query_id, $text = null) {
    try {
        $params = ['callback_query_id' => $callback_query_id];
        if ($text) {
            $params['text'] = $text;
        }
        
        $url = API_URL . 'answerCallbackQuery';
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 5);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $result = curl_exec($ch);
        curl_close($ch);
        
        return $result !== false;
    } catch (Exception $e) {
        logError("Answer callback failed: " . $e->getMessage());
        return false;
    }
}

// Main keyboard
function getMainKeyboard() {
    return [
        [['text' => '?? Earn', 'callback_data' => 'earn'], ['text' => '?? Balance', 'callback_data' => 'balance']],
        [['text' => '?? Leaderboard', 'callback_data' => 'leaderboard'], ['text' => '?? Referrals', 'callback_data' => 'referrals']],
        [['text' => '?? Withdraw', 'callback_data' => 'withdraw'], ['text' => '? Help', 'callback_data' => 'help']]
    ];
}

// Process commands and callbacks
function processUpdate($update) {
    $users = loadUsers();
    
    if (isset($update['message'])) {
        $chat_id = $update['message']['chat']['id'];
        $text = trim($update['message']['text'] ?? '');
        
        // Create new user if doesn't exist
        if (!isset($users[$chat_id])) {
            $users[$chat_id] = [
                'balance' => 0,
                'last_earn' => 0,
                'referrals' => 0,
                'ref_code' => substr(md5($chat_id . time()), 0, 8),
                'referred_by' => null
            ];
        }
        
        if (strpos($text, '/start') === 0) {
            $parts = explode(' ', $text);
            $ref = $parts[1] ?? null;
            
            if ($ref && !$users[$chat_id]['referred_by']) {
                foreach ($users as $id => $user) {
                    if (isset($user['ref_code']) && $user['ref_code'] === $ref && $id != $chat_id) {
                        $users[$chat_id]['referred_by'] = $id;
                        $users[$id]['referrals'] = ($users[$id]['referrals'] ?? 0) + 1;
                        $users[$id]['balance'] = ($users[$id]['balance'] ?? 0) + 50; // Referral bonus
                        sendMessage($id, "?? New referral! +50 points bonus!");
                        break;
                    }
                }
            }
            
            $msg = "Welcome to Earning Bot!\nEarn points, invite friends, and withdraw your earnings!\nYour referral code: <b>{$users[$chat_id]['ref_code']}</b>";
            sendMessage($chat_id, $msg, getMainKeyboard());
        }
        
    } elseif (isset($update['callback_query'])) {
        $callback_query = $update['callback_query'];
        $chat_id = $callback_query['message']['chat']['id'];
        $data = $callback_query['data'];
        $callback_query_id = $callback_query['id'];
        
        // Answer callback query first to remove loading state
        answerCallbackQuery($callback_query_id);
        
        if (!isset($users[$chat_id])) {
            $users[$chat_id] = [
                'balance' => 0,
                'last_earn' => 0,
                'referrals' => 0,
                'ref_code' => substr(md5($chat_id . time()), 0, 8),
                'referred_by' => null
            ];
        }
        
        switch ($data) {
            case 'earn':
                $time_diff = time() - ($users[$chat_id]['last_earn'] ?? 0);
                if ($time_diff < 60) {
                    $remaining = 60 - $time_diff;
                    $msg = "? Please wait $remaining seconds before earning again!";
                } else {
                    $earn = 10;
                    $users[$chat_id]['balance'] = ($users[$chat_id]['balance'] ?? 0) + $earn;
                    $users[$chat_id]['last_earn'] = time();
                    $msg = "? You earned $earn points!\nNew balance: {$users[$chat_id]['balance']}";
                }
                break;
                
            case 'balance':
                $balance = $users[$chat_id]['balance'] ?? 0;
                $referrals = $users[$chat_id]['referrals'] ?? 0;
                $msg = "?? Your Balance\nPoints: $balance\nReferrals: $referrals";
                break;
                
            case 'leaderboard':
                $balances = [];
                foreach ($users as $id => $user) {
                    if (isset($user['balance'])) {
                        $balances[$id] = $user['balance'];
                    }
                }
                
                arsort($balances);
                $top = array_slice($balances, 0, 5, true);
                $msg = "?? Top Earners\n";
                $i = 1;
                foreach ($top as $id => $bal) {
                    $msg .= "$i. User $id: $bal points\n";
                    $i++;
                }
                if (empty($top)) {
                    $msg .= "No users yet!";
                }
                break;
                
            case 'referrals':
                $ref_code = $users[$chat_id]['ref_code'] ?? 'N/A';
                $referrals = $users[$chat_id]['referrals'] ?? 0;
                $bot_username = explode(':', BOT_TOKEN)[0];
                $msg = "?? Referral System\nYour code: <b>$ref_code</b>\nReferrals: $referrals\nInvite link: https://t.me/$bot_username?start=$ref_code\n50 points per referral!";
                break;
                
            case 'withdraw':
                $min = 100;
                $balance = $users[$chat_id]['balance'] ?? 0;
                if ($balance < $min) {
                    $needed = $min - $balance;
                    $msg = "?? Withdrawal\nMinimum: $min points\nYour balance: $balance\nNeed $needed more points!";
                } else {
                    $amount = $balance;
                    $users[$chat_id]['balance'] = 0;
                    $msg = "?? Withdrawal of $amount points requested!\nOur team will process it soon.";
                }
                break;
                
            case 'help':
                $msg = "? Help\n?? Earn: Get 10 points/min\n?? Refer: 50 points/ref\n?? Withdraw: Min 100 points\nUse buttons below to navigate!";
                break;
                
            default:
                $msg = "Unknown command. Please try again.";
                break;
        }
        
        sendMessage($chat_id, $msg, getMainKeyboard());
    }
    
    saveUsers($users);
    return ['status' => 'ok'];
}

// Webhook setup function
function setWebhook($url) {
    try {
        $params = ['url' => $url];
        $ch = curl_init(API_URL . 'setWebhook');
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $result = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($result === false) {
            return ['ok' => false, 'error' => 'CURL error'];
        }
        
        $response = json_decode($result, true);
        return $response ?: ['ok' => false, 'error' => 'Invalid JSON response'];
    } catch (Exception $e) {
        logError("Webhook setup failed: " . $e->getMessage());
        return ['ok' => false, 'error' => $e->getMessage()];
    }
}

// Get webhook info function
function getWebhookInfo() {
    try {
        $ch = curl_init(API_URL . 'getWebhookInfo');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $result = curl_exec($ch);
        curl_close($ch);
        
        return json_decode($result, true);
    } catch (Exception $e) {
        logError("Get webhook info failed: " . $e->getMessage());
        return ['ok' => false, 'error' => $e->getMessage()];
    }
}

// Main webhook handler
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $input = file_get_contents('php://input');
    $update = json_decode($input, true);
    
    if ($update && json_last_error() === JSON_ERROR_NONE) {
        $response = processUpdate($update);
        echo json_encode($response);
    } else {
        $error = json_last_error_msg();
        logError("Invalid JSON update: $error. Input: " . substr($input, 0, 200));
        echo json_encode(['status' => 'error', 'message' => 'Invalid update data', 'error' => $error]);
    }
    exit;
}

// Handle webhook setup via GET request
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    if (isset($_GET['set_webhook'])) {
        $webhookUrl = $_GET['url'] ?? (getenv('WEBHOOK_URL') ?: 'https://your-app-name.onrender.com');
        $result = setWebhook($webhookUrl);
        echo json_encode($result);
    } elseif (isset($_GET['delete_webhook'])) {
        $result = setWebhook('');
        echo json_encode($result);
    } elseif (isset($_GET['get_webhook_info'])) {
        $result = getWebhookInfo();
        echo json_encode($result);
    } elseif (isset($_GET['health'])) {
        // Health check endpoint
        echo json_encode(['status' => 'ok', 'timestamp' => time()]);
    } else {
        echo json_encode([
            'status' => 'ready',
            'message' => 'Telegram Bot Webhook Endpoint',
            'endpoints' => [
                'POST' => 'Webhook handler for Telegram updates',
                'GET ?set_webhook=1' => 'Setup webhook',
                'GET ?delete_webhook=1' => 'Remove webhook',
                'GET ?get_webhook_info=1' => 'Get webhook info',
                'GET ?health=1' => 'Health check'
            ]
        ]);
    }
    exit;
}

// Handle other HTTP methods
http_response_code(405);
echo json_encode(['status' => 'error', 'message' => 'Method not allowed']);
?>